var dKmToMiles = 0.621371192, dMilesToKm = 1.609344, dLitresToGallons = 0.264172052, dGallonsToLitres = 3.78541178, dImpGallonsToGallons = 0.83267384, dGallonsToImpGallons = 1.20095042, dLitresToImpGallons = 4.54609188, dLPKM = 235.214584, dLBSGallonDiesel = 28.16, dLBSGallonFuel = 24.4, returnDocument = function (a) { return a ? document.body : document }, getScrollTop = function () { return returnDocument(!0).scrollTop }, getScrollLeft = function () { return returnDocument(!0).scrollLeft }, _tc_substr = function (a, b, c) { return a.substr(b, c) }, toLower = function (a) { return a.toLowerCase() }, _tc_round = function (a, b) { return a.toFixed ? parseFloat(a.toFixed(b)) : Math.round(a) }, getEvent = function (a) { var b; window.event ? b = window.event : b = a; return b }, getSrcObj = function (a) { a = getEvent(a); var b; a.srcElement ? b = a.srcElement : b = a.target; return b }, getKeycode = function (a) { var b; a.srcElement ? b = a.keyCode : b = a.which; return b }, myParseInt = function (a) { return parseInt(a) }, convertKMsToMiles = function (a) { return a * dKmToMiles }, convertMetersToMiles = function (a) { return a / 1E3 * dKmToMiles }, convertMilesToKMs = function (a) { return a * dMilesToKm }, convertMPGToLPKM = function (a) { return dLPKM / a }, convertMPGToMPIG = function (a) { return a * dGallonsToImpGallons }, convertMPIGToMPG = function (a) { return a * dImpGallonsToGallons }, convertLPKMToMPG = function (a) { return dLPKM / a }, convertGallonsToLitres = function (a) { return a * dGallonsToLitres }, convertGallonsToImpGallons = function (a) { return a * dGallonsToImpGallons }, convertLitresToGallons = function (a) { return a * dLitresToGallons }, convertLitresToImpGallons = function (a) { return a * dLitresToImpGallons }, convertImpGallonsToGallons = function (a) { return a * dImpGallonsToGallons }, convertPriceCDNToUS = function (a) { return a / dExchangeRate }, convertPriceUSToCDN = function (a) { return a * dExchangeRate }, addOffset = function (a) { return parseFloat(a) + 0.009 }, 
oGMap, oGDir, oGDirDisplay, oGPoly, oGPolyPointCount = 0, oGBoxes, oGDrivingResult, oGInfoWindow, oRoadPoints = [], routeBoxer = null, bGMapLoaded = !1, bShowDirections = !1, bMembershipRequired = !1, oAutoComplete = {}, bShowStations = !1, dExchangeRate = 1, iTimeOffset = 0, sTripID = "", bExcludeMembershipStations = !1, manyStepBounds, iGDistance = 0, iGDistanceCity = 0, iGDistanceHwy = 0, iGDistanceHwyCity = 0, iGDistanceHwyPct = 0, iDistanceCity = 0, iDistanceHwy = 0, aHwyBoundBox = [], sSetS = "", bReturnTrip = !0, iFillClick = -1, oRouteFills = {}, dDistanceRoadPoints = 0, bInfoWindow = !1, oInfoWindow = {}, aRoutes = [], oRoutes = {}, aHwyBB = [], bGRequestComplete = !1, bLoadTrip = !1, iGZoom = 10, oCurMarker, oGMarkers = {}, aGListeners = [], oFills = {}, aFillListeners = [], aAreas = [], iMpgCity = 0, iMpgHwy = 0, sMPGUnit, dTank = 0, dTankPct = 0.98, dTankMiles = 0, dTankPctFill = 0.25, sDistanceUnit, dStartTank = 1, sFuelType = "A", dTotalGallons = 0, iVehicleID = 0, sVehicleView = "", dCo2 = 0, aStepBoxes = [], aDestinations = [], oDestinations = {}, bShowingAutoComplete = !1, iCurResultIndex, iResultCount, oSelectedResult, sMemberID = "", oLetter = { 0: "A", 1: "B", 2: "C", 3: "D", 4: "E", 5: "F", 6: "G", 7: "H", 8: "I", 9: "J", 10: "K", 11: "L", 12: "M", 13: "N", 14: "O", 15: "P", 16: "Q", 17: "R", 18: "S", 19: "T", 20: "U", 21: "V", 22: "W", 23: "X", 24: "Y", 25: "Z" }, oFuelType = { A: "Regular", B: "Midgrade", C: "Premium", D: "Diesel" }, oFlag = { 0: { img: "b", html: "174d64", css: "b" }, 1: { img: "m", html: "6b0b16", css: "m" }, 2: { img: "g", html: "166316", css: "g" }, 3: { img: "o", html: "a04510", css: "o" } }, oStates = { AL: "Alabama", AK: "Alaska", AZ: "Arizona", AR: "Arkansas", CA: "California", CO: "Colorado", CT: "Connecticut", DE: "Delaware", DC: "District of Columbia", FL: "Florida", GA: "Georgia", HI: "Hawaii", ID: "Idaho", IL: "Illinois", IN: "Indiana", IA: "Iowa", KS: "Kansas", KY: "Kentucky", LA: "Louisiana", ME: "Maine", MD: "Maryland", MA: "Massachusetts", MI: "Michigan", MN: "Minnesota", MS: "Mississippi", MO: "Missouri", MT: "Montana", NE: "Nebraska", NV: "Nevada", NH: "New Hampshire", NJ: "New Jersey", NM: "New Mexico", NY: "New York", NC: "North Carolina", ND: "North Dakota", OH: "Ohio", OK: "Oklahoma", OR: "Oregon", PA: "Pennsylvania", RI: "Rhode Island", SC: "South Carolina", SD: "South Dakota", TN: "Tennessee", TX: "Texas", UT: "Utah", VT: "Vermont", VA: "Virginia", WA: "Washington", WV: "West Virginia", WI: "Wisconsin", WY: "Wyoming", AB: "Alberta", BC: "British Columbia", MB: "Manitoba", NB: "New Brunswick", NL: "Newfoundland and Labrador", NT: "Northwest Territories", NS: "Nova Scotia", NU: "Nunavut", ON: "Ontario", PE: "Prince Edward Island", QC: "Quebec", SK: "Saskatchewan", YT: "Yukon" }, oQuery = {}, sVehicleLineClientID = "", sUA = navigator.userAgent, bIE6 = !1, bIE = !1, iIETest = 0, iIETest = sUA.indexOf("MSIE"); -1 < iIETest && (bIE = !0, iIETest = parseFloat(sUA.substring(iIETest + 5)), 6 == iIETest && (bIE6 = !0)); function initialize() { loadQueryStringArray(); void 0 != oQuery.ti && showLoading(); jQuery("#divSliderStops").slider({ handle: ".slider-handle", min: 25, max: 75, startValue: 50, steps: 2 }); jQuery("#divSliderTank").slider({ handle: ".slider-handle", min: 5, max: 100, startValue: 100 }); var a = new Image(158, 33); a.src = "/images/trip/FuelMeO.png"; a.src = "/images/trip/tip-l-arrow.gif"; a.src = "/images/trip/tip-r-arrow.gif"; bIE6 || (a = document.getElementById("divMap"), a.style.position = "static", a.style.left = "auto", a.style.top = "auto", a.style.visibility = "hidden"); oGMap = new google.maps.Map(document.getElementById("map_canvas"), { zoom: 3, center: new google.maps.LatLng(49.724479, -95.449218) }); oGInfoWindow = new google.maps.InfoWindow({ content: "Loading..." }); google.maps.event.addDomListener(window, "load", setGMapLoaded); routeBoxer = new RouteBoxer; manyStepBounds = new google.maps.LatLngBounds; bIE6 && (a = document.getElementById("divMap"), a.style.position = "static", a.style.left = "auto", a.style.top = "auto", a.style.visibility = "hidden"); 
oGDir = new google.maps.DirectionsService; oGDirDisplay = new google.maps.DirectionsRenderer; oGDirDisplay.setMap(oGMap); google.maps.event.addListener(oGMap, "bounds_changed", function () { setGMapLoaded(); google.maps.event.clearListeners(oGMap, "bounds_changed") }); google.maps.event.addListener(oGMap, "dragstart", function () { bLoadingStations = !0 }); google.maps.event.addListener(oGMap, "zoom_changed", function () { oGInfoWindow.close(); clearGasStations(); loadGasStations() }); google.maps.event.addListener(oGMap, "dragend", function () { oGInfoWindow.close(); clearGasStations(); loadGasStations() }) } function loadQueryStringArray() { var a = window.location.search.substring(1), b = [], c = [], d = 0, e = 0; if ("" != a) for (b = a.split("&"), d = b.length, e = 0; e < d; e++) c = b[e].split("="), oQuery[c[0]] = c[1].replace(/%20/g, " ") } function setGMapLoaded() { bGMapLoaded = !0; if (void 0 != oQuery.ti) return bLoadTrip = !0, setTripID(oQuery.ti), !0; void 0 != oQuery.st && setSliderTank(oQuery.st); void 0 != oQuery.ot && setSliderStops(oQuery.ot); void 0 == oQuery.d || "m" != oQuery.d && "km" != oQuery.d || (sDistanceUnit = oQuery.d, initDistanceUnit()); void 0 == oQuery.f || "mpg" != oQuery.f && "lkm" != oQuery.f && "mpig" != oQuery.f || (sMPGUnit = oQuery.f, initFuelEconomyUnit()); void 0 == oQuery.ft || "A" != oQuery.ft && "B" != oQuery.ft && "C" != oQuery.ft && "D" != oQuery.ft || (sFuelType = oQuery.ft, displayFuelType()); void 0 != oQuery.l && setDestinations(oQuery.l) } var sBAM = ""; function LoadTrip_Complete(a) { if ("" != a && null != a) { var b = eval("(" + a.value + ")"); setDestinations(b.l); void 0 != b.st && setSliderTank(100 * b.st); void 0 != b.ot && setSliderStops(100 * b.ot); void 0 == b.du || "m" != b.du && "km" != b.du || (sDistanceUnit = b.du, initDistanceUnit()); void 0 == b.f || "mpg" != b.f && "lkm" != b.f && "mpig" != b.f || (sMPGUnit = b.f, initFuelEconomyUnit()); if (void 0 != b.vid && 0 != b.vid) { var c = []; c.push(b.c); c.push(b.h); c.push(b.t); c.push(b.ft); c.push(b.vid); c.push(b.vco2); parseVehicleString(c.join(",")) } else iMpgCity = b.c, iMpgHwy = b.h, dTank = b.t, dTankMiles = iMpgHwy * dTank, sFuelType = b.ft, iVehicleID = 0, dCo2 = "D" == sFuelType ? dLBSGallonDiesel : dLBSGallonFuel, displayMPG(), displayTank(), displayFuelType(), displayTankMiles(), sVehicleView = "custom", document.getElementById("divVehicleSelector").style.display = "none", document.getElementById("divVehicleCustom").style.display = ""; sBAM = a; getDestinations() } else document.getElementById("divError").innerHTML = "Unable to load trip.", hideLoading(), document.getElementById("divError").style.display = "" } function LoadTrip_Failed(a) { } function setDestinations(a) { a = a.split("|"); var b = 0, c = 0, b = a.length; a[0] == a[b - 1] && (a.pop(), b--); document.getElementById("tdDestS").value = a[0].toString().replace(/%20/g, " "); c++; document.getElementById("tdDestE").value = a[b - 1].toString().replace(/%20/g, " "); a.pop(); b--; for (c; c < b; c++) addDestination(), document.getElementById("tdDest" + c).value = a[c] } function setSliderStops(a) { 25 == a || 75 == a ? jQuery("#divSliderStops").slider("moveTo", a, 0) : jQuery("#divSliderStops").slider("moveTo", 50, 0) } function setSliderTank(a) { 5 <= a && 100 >= a ? jQuery("#divSliderTank").slider("moveTo", a, 0) : jQuery("#divSliderTank").slider("moveTo", 100, 0) } function roadBuster(a) { a = a.replace(/\/<wbr\/>/g, "</b><b>"); a = a.replace(/ ([N|S|E|W]*)<\/b>/g, "</b>"); a = a.replace(/<b>([N|S|E|W]*) /g, "<b>"); var b = /<b[^>]*>(.*?)<\/b>/g; a = a.match(b); var c = 0, d = [], b = []; if (null != a && null != a.length) for (c = 0; c < a.length; c++) a[c] = a[c].replace(/Maj\s/, "Major "), a[c] = a[c].replace(/Cr /, "Cross "), a[c] = a[c].replace(/''/g, "&#39;"), b = /([A-Za-z]+-[0-9]+)/, b = a[c].match(b), null != b && d.join("").indexOf(b[0]) ? d.push(b[0]) : null, b = /([^>]*)\s(Pkwy|Expy|Turnpike|Fwy|Ave|St|Blvd|Dr|Hwy|Rd|Trail|Bridge)/, b = a[c].match(b), null != b && d.join("").indexOf(b[1]) ? d.push(b[1]) : null, b = /Boulevard|Avenue|Boul\.|Rue\s([^<]*)/, b = a[c].match(b), null != b && d.join("").indexOf(b[1]) ? d.push(b[1]) : null, b = /[Aa]uto\s?[Rr]oute\s([^<]+)/, b = a[c].match(b), null != b && d.join("").indexOf(b[1]) ? d.push(b[1]) : null, b = />(Route\s[^<]+)/, b = a[c].match(b), null != b && d.join("").indexOf(b[1]) ? d.push(b[1]) : null; return d } function processRoadLatLng(a, b, c, d) { c < b.MinY && (b.MinY = c); c > b.MaxY && (b.MaxY = c); d < b.MinX && (b.MinX = d); d > b.MaxX && (b.MaxX = d) } function processRoad(a, b, c, d, e) { if (b != c) { a = { MinX: 60, MaxX: -125, MinY: 50, MaxY: 20 }; for (var f = 0, f = b; f <= c; f += 5) processRoadLatLng(f, a, d, e); a.MinY -= 0.007232; a.MaxY += 0.007232; a.MinX -= 0.009248; a.MaxX += 0.009248; a.MinY = truncateLatLong(a.MinY); a.MaxY = truncateLatLong(a.MaxY); a.MinX = truncateLatLong(a.MinX); a.MaxX = truncateLatLong(a.MaxX); return a } return "" } function truncateLatLong(a) { var b = 0; a = a.toString(); b = a.indexOf(".", 0); a = _tc_substr(a, 0, b + 6); return parseFloat(a) } var bLoadingStations = !1; function loadGasStations() { if (bShowStations) if (bLoadingStations = !0, oGMap.getZoom() >= iGZoom) { setTimeout("document.getElementById(\"gm_loading\").style.visibility = 'visible';", 1); var a = oGMap.getBounds(), b = a.getSouthWest(), a = a.getNorthEast(); getGasStations("{p:[" + oRoadPoints.join(",") + "]}", b.lat(), a.lat(), b.lng(), a.lng()) } else setTimeout("document.getElementById(\"gm_loading\").style.visibility = 'hidden';", 1) } function clearGasStations() { for (var a = aGListeners.length - 1; 0 <= a;) GEvent.removeListener(aGListeners[a]), aGListeners.pop(), a--; for (var b in oGMarkers) oGMarkers[b].setMap(null); oGMarkers = {} } function getGasStations(a, b, c, d, e) { GasBuddy_ASPX.TripCalculatorControlv2.GetStationsByBounds(a, sFuelType, b, c, d, e, getGasStations_Complete, getGasStations_Failed) } var iCounter = 0; function getGasStations_Complete(a) { if (!0 == bLoadingStations) { a = eval("(" + a.value + ")"); iCounter++; new google.maps.Size(25, 15); new google.maps.Point(0, 0); new google.maps.Point(15, 12); if (null != a && void 0 !== a.rows) { var b = a.rows.length; for (iX = 0; iX < b; iX++) createStationMarker(new google.maps.LatLng(a.rows[iX].lat, a.rows[iX]["long"]), a.rows[iX].id, a.rows[iX].flag); 0 <= iFillClick && getFillStationInfo(iFillClick) } setTimeout("document.getElementById(\"gm_loading\").style.visibility = 'hidden';", 1); bLoadingStations = !1 } } function getGasStations_Failed(a) { } function setZIndex(a) { return "0.00" == a.flag ? -10 : 10 < parseFloat(a.flag) ? Math.round(2E3 - 10 * parseFloat(a.flag)) : Math.round(2E3 - 100 * parseFloat(a.flag)) } function setZIndex2(a) { return void 0 == a.price || "0.00" == a.price ? -10 : 10 < parseFloat(a.price) ? Math.round(3E3 - 10 * parseFloat(a.price)) : Math.round(3E3 - 100 * parseFloat(a.price)) } function createStationMarker(a, b, c) { var d = {}, e = 0; 0 < c ? (sFlagPrice = formatFlagPrice(c), 10 < parseFloat(sFlagPrice) ? (d.size = new google.maps.Size(31, 15), d.origin = new google.maps.Point(0, 0), d.anchor = new google.maps.Point(15, 15)) : (d.size = new google.maps.Size(25, 15), d.origin = new google.maps.Point(0, 0), d.anchor = new google.maps.Point(15, 12)), d.url = "/images/trip/m/pump.m" + formatFlagPrice(c) + ".gif") : (d.size = new google.maps.Size(25, 15), d.origin = new google.maps.Point(0, 0), d.anchor = new google.maps.Point(15, 12), d.url = "/images/trip/pumpna.gif"); a = new google.maps.Marker({ position: a, icon: d, map: oGMap }); a.flag = c; a.id = b; a.price = c; !1 == bShowStations && a.setVisible(!1); e = setZIndex2(a); a.setZIndex(e); google.maps.event.addListener(a, "click", function () { getStationInfoByID(b, "s") }); oGMarkers[b] = a } function centerShowStation(a, b, c) { var d = oGMap.getZoom(); oGInfoWindow.close(); iFillClick = a; clearGasStations(); oGMap.setCenter(new google.maps.LatLng(b, c)); getFillStationInfo(a); d >= iGZoom ? loadGasStations() : null } function getStationInfoByID(a, b) { GasBuddy_ASPX.TripCalculatorControlv2.GetStationInfo(a, sFuelType, getStationInfo_Complete, getStationInfo_Failed) } function getStationInfo_Complete(a) { a = eval("(" + a.value + ")"); var b = ""; if (void 0 !== a.rows && null != a.rows && void 0 !== a.rows[0]) var c = a.rows[0], b = formatStationDetials(c); else b = '<div style="white-space:nowrap; font-size:10px; font-family:Arial,Verdana;"><table cellpadding=0 cellspacing=0 style="background-color: #FFFFFF; layer-background-color: #FFFFFF;"><tr><td>No station details found.', b += "</td></tr></table></div>"; oGInfoWindow.setContent(b); oGInfoWindow.open(oGMap, oGMarkers[c.id]) } function getStationInfo_Failed(a) { } function clearFills() { for (var a = aFillListeners.length - 1; 0 <= a;) GEvent.removeListener(aFillListeners[a]), aFillListeners.pop(), a--; for (var b in oFills) oFills[b].setMap(null); oFills = {} } function getDestinations() { var a = 0, b = {}, c = aDestinations.length; b.waypoints = []; "" != document.getElementById("tdDestS").value.trim() && (b.origin = document.getElementById("tdDestS").value); for (a = 1; a <= c; a++) "" != document.getElementById("tdDest" + a).value.trim() && b.waypoints.push({ location: document.getElementById("tdDest" + a).value, stopover: !0 }); !0 == bReturnTrip ? ("" != document.getElementById("tdDestE").value.trim() && b.waypoints.push({ location: document.getElementById("tdDestE").value, stopover: !0 }), b.destination = document.getElementById("tdDestS").value) : "" != document.getElementById("tdDestE").value.trim() && (b.destination = document.getElementById("tdDestE").value); return b } 

function fuelMyTrip() { bLoadTrip = !1; 
if (void 0 != oGDir) { var a = { origin: "", destination: "", waypoints: [] }; clearFills(); setTimeout("document.getElementById(\"gm_loading\").style.visibility = 'hidden';", 1); if ("custom" == sVehicleView) { if (0 >= iMpgHwy || 0 >= iMpgCity) return document.getElementById("divError").innerHTML = "Please enter valid fuel economy information.", document.getElementById("divError").style.display = "", !1; if (0 >= dTank) return document.getElementById("divError").innerHTML = "Please enter a valid tank size.", document.getElementById("divError").style.display = "", !1 } else if (0 == iVehicleID) { document.getElementById("divError").innerHTML = "Please select a vehicle."; document.getElementById("divError").style.display = ""; return } document.getElementById("divError").style.display = "none"; a = getDestinations(); dStartTank = jQuery("#divSliderTank").slider("value", 0) / 100; dTankPctFill = jQuery("#divSliderStops").slider("value", 0) / 100; clearOutput(); if ("" != a.start) { showLoading(); var b = { origin: a.origin, destination: a.destination, optimizeWaypoints: !1, travelMode: google.maps.TravelMode.DRIVING }; "undefined" != typeof a.waypoints && 0 < a.waypoints.length && (b.waypoints = a.waypoints); 
oGDir.route(b, function (a, b) { b == google.maps.DirectionsStatus.OK ? (oGDirDisplay.setDirections(a), oGDrivingResult = a, getGDirectionsComplete()) : getGDirectionsError(b) }) } else document.getElementById("divError").innerHTML = "Enter at least two locations.", hideLoading(), document.getElementById("divError").style.display = "" } 
else document.getElementById("divError").innerHTML = "Loading Google Maps. Please try again.", hideLoading(), document.getElementById("divError").style.display = "" } 
function getTripStationsRouteBoxer() { } function getTripStations() { var a = 0, b = 0, c = 0, d, e = null, f, g, h = 0, k = 1, l = 0; oRoadPoints = []; h = 10 * (parseInt(oGPolyPointCount / 5E3) + 1); c = oGPoly.length; for (a = 0; a < c; a++) { f = oGPoly[a].path; g = f.length; for (b = 0; b < g; b += h) d = f[b], null != e && (l += convertMetersToMiles(calcDistanceLatLng(e, d))), oRoadPoints.push("{i:" + k + ",y:" + d.lat().toFixed(6) + ",x:" + d.lng().toFixed(6) + ",d:" + _tc_round(l, 2) + ", l:" + oGPoly[a].leg + "}"), k += h, e = d; d = f[g - 1]; oRoadPoints.push("{i:" + k + ",y:" + d.lat().toFixed(6) + ",x:" + d.lng().toFixed(6) + ",d:" + _tc_round(l, 2) + ", l:" + oGPoly[a].leg + "}"); k += h; e = d } getTO("{p:[" + oRoadPoints.join(",") + "]}") } function getTO(a) { initializeOutput(); var b = [], c = [], d = oGDrivingResult.routes[0].legs[0].start_location.toUrlValue(); sEndPoint = oGDrivingResult.routes[0].legs[oGDrivingResult.routes[0].legs.length - 1].end_location.toUrlValue(); c = getDestinations(); b.push(c.origin); if ("undefined" != typeof c.waypoints) for (var e = 0; e < c.waypoints.length; e++) b.push(c.waypoints[e]); b.push(c.destination); GasBuddy_ASPX.TripCalculatorControlv2.TripOptimizer(a, "", sFuelType, dTankPct, dTankPctFill, dStartTank, d, sEndPoint, "<ls>" + aRoutes.join("") + "</ls>", b.join("|"), parseFloat(iMpgCity), parseFloat(iMpgHwy), parseFloat(dTank), sDistanceUnit, sMPGUnit, sMemberID, parseInt(iVehicleID), parseFloat(dExchangeRate), iGDistanceCity, iGDistanceHwy, parseInt(dCo2), bMembershipRequired, aStepBoxes, getTO_Complete) } function createRangeMarker(a, b, c, d) { var e = new GMarker(a, { icon: b }); e.num = d; GEvent.addListener(e, "click", function () { e.openInfoWindowHtml(c + "<br />" + e.num) }); oGMap.addOverlay(e) } function getTO_Complete(a) { processTrip(a.value) } function getTO_Failed(a) { document.getElementById("divDir").innerHTML = "&nbsp;"; document.getElementById("tblNoFills").style.display = "none" } 
function processTrip(a) { var b = [], c = 0, d = 0, e = "", f = 0, g = {}; if ("" != a && null != a) { a = eval("(" + a + ")"); clearOutput(); for (var h = oGDrivingResult.routes[0].legs.length, k = 0, c = 0; c < h; c++) { var b = [], l = oGDrivingResult.routes[0].legs[c], d = l.distance.value, m = l.steps.length, n = 0; b.push('<div><div class="rpoint">'); b.push("<table><tr>"); b.push('<td style="width: 40px; font-size: 0px; text-align: center;"><img src="http://maps.google.com/intl/en_ALL/mapfiles/marker_green' + oLetter[c] + '.png"></td>'); b.push('<td><span class="btext">' + l.start_address + "</span><br />"); !0 == bShowDirections ? b.push('<a id="hlR' + c + '" href="javascript:void(0);" onclick="_tc_30_td(this, ' + c + ", " + m + ', false);">Hide Directions</a>') : b.push('<a id="hlR' + c + '" href="javascript:void(0);" onclick="_tc_30_td(this, ' + c + ", " + m + ', true);">Show Directions</a>'); b.push("</td></tr></table></div></div>"); b.push('<div style="width: 478px;"><div style="float:right"> (about ' + l.duration.text + ')</div><div id="divR' + c + 'D" class="rdesc" style="float: right;" dist="' + d + '">' + formatMeters(d) + '</div><div class="clearb"></div></div>'); b.push('<div id="divR' + c + '">'); for (d = 0; d < m; d++) { var f = l.steps[d], n = f.distance.value, p = 0, p = k, k = k + f.path.length; b.push('<div id="divR' + c + "S" + d + '" class="desc"'); !1 == bShowDirections && b.push(' style="display: none;"'); b.push(">"); b.push('<div class="sdesc">' + f.instructions + "</div>"); b.push('<div id="divR' + c + "S" + d + 'D" class="sdist" dist="' + n + '">' + formatMeters(n) + "</div>"); b.push('<div class="clearb"></div></div>'); if (void 0 !== a.rows && d < m) for (f = a.rows.length, n = d + 1 < m ? k : c + 1 < h ? k + oGDrivingResult.routes[0].legs[c].steps.length : oGDrivingResult.routes[0].overview_path.length, e = "", iZ = 0; iZ < f; iZ++) if (a.rows[iZ].v < n && a.rows[iZ].v >= p) { 1 <= a.rows[iZ].flag && 3 >= a.rows[iZ].flag && (g = {}, e = formatFlagPrice(a.rows[iZ].price), 10 < parseFloat(e) ? (g.size = new google.maps.Size(31, 15), g.origin = new google.maps.Point(0, 0), g.anchor = new google.maps.Point(15, 15)) : (g.size = new google.maps.Size(25, 15), g.origin = new google.maps.Point(0, 0), g.anchor = new google.maps.Point(15, 12)), g.url = "/images/trip/" + oFlag[c % 4].img + "/pump." + oFlag[c % 4].img + formatFlagPrice(a.rows[iZ].price) + ".gif", createFillMarkerv3(g, a.rows[iZ])); e = ""; void 0 != a.rows[iZ].opct && 0.25 >= a.rows[iZ].opct && (e = ' rowspan="2" '); b.push('<div class="sgas' + oFlag[c % 4].css + '">'); b.push('<table cellspacing="0" style="width: 100%;">'); b.push("<tr>"); b.push("<td" + e + ' class="ftd' + oFlag[c % 4].css + '" onmouseover="this.style.cursor=\'pointer\';" onclick="_tc_31_css(' + a.rows[iZ].fill + ", " + a.rows[iZ].lat + ", " + a.rows[iZ]["long"] + ');"><span class="flink">Fill<br />#' + a.rows[iZ].fill + "</span></td>"); b.push("<td" + e + ' class="sgasf2" onmouseover="this.style.cursor=\'pointer\';" onclick="_tc_31_css(' + a.rows[iZ].fill + ", " + a.rows[iZ].lat + ", " + a.rows[iZ]["long"] + ');">'); if (1 == a.rows[iZ].flag || 2 == a.rows[iZ].flag) b.push('<span style="font-size: 14px;"><b>' + a.rows[iZ].station_nm + "</b></span>"), b.push("<br />"), b.push(a.rows[iZ].address + "<br />"), b.push(a.rows[iZ].city + ", " + a.rows[iZ].state + "<br />"); 3 == a.rows[iZ].flag && (b.push('<span style="font-size: 14px;;"><b>Area Average</b></span>'), b.push("<br />"), b.push("No known stations in this area.<br />")); b.push("</td>"); b.push('<td class="fillp">'); b.push('<table cellspacing="0" cellpadding="0" align="right">'); "lkm" == sMPGUnit && 10 > a.rows[iZ].price ? (b.push('<tr><td cost="' + a.rows[iZ].price + '" align="right">' + formatGasPrice3(a.rows[iZ].pu, a.rows[iZ].pc, "mpg", "s") + "</td></tr>"), b.push("<tr><td>" + formatGasPrice3(a.rows[iZ].pu, a.rows[iZ].pc, "lkm", "e") + "</td></tr>"), e = '<br /><span class="sgasf3cur">CAN</span>') : "mpg" == sMPGUnit && 10 < a.rows[iZ].price ? (b.push('<tr><td cost="' + a.rows[iZ].price + '" align="right">' + formatGasPrice3(a.rows[iZ].pu, a.rows[iZ].pc, "lkm", "s") + "</td></tr>"), b.push("<tr><td>" + formatGasPrice3(a.rows[iZ].pu, a.rows[iZ].pc, "mpg", "e") + "</td></tr>"), e = '<br /><span class="sgasf3cur">USD</span>') : "mpig" == sMPGUnit ? (10 > a.rows[iZ].price ? b.push('<tr><td cost="' + a.rows[iZ].price + '" align="right">' + formatGasPrice3(a.rows[iZ].pu, a.rows[iZ].pc, "mpg", "s") + "</td></tr>") : b.push('<tr><td cost="' + a.rows[iZ].price + '" align="right">' + formatGasPrice3(a.rows[iZ].pu, a.rows[iZ].pc, "lkm", "s") + "</td></tr>"), b.push("<tr><td>" + formatGasPrice3(a.rows[iZ].pu, a.rows[iZ].pc, "mpig", "e") + "</td></tr>"), e = '<br /><span class="sgasf3cur">CAN</span>') : (b.push('<tr><td cost="' + a.rows[iZ].price + '" align="right">' + formatGasPrice3(a.rows[iZ].pu, a.rows[iZ].pc, sMPGUnit, "s") + "</td></tr>"), e = ""); b.push('<tr><td id="tdR' + c + "G" + oRouteFills[c] + '" gal="' + a.rows[iZ].g + '" class="fillg" align="right">' + formatFuelVolume2(a.rows[iZ].g, a.rows[iZ].price) + "</td></tr>"); b.push("</table></td>"); b.push('<td class="fillc">'); b.push('<span class="sgasf3">$' + formatCurrency("mpg" == sMPGUnit ? a.rows[iZ].cu : a.rows[iZ].cc) + "</span>" + e + "</td>"); b.push("</tr>"); void 0 != a.rows[iZ].opct && 0.25 >= a.rows[iZ].opct && b.push('<tr><td colspan="2" align="right" style="padding: 0 10px 0 0;"><a class="low" href="javascript:void(0);" onclick="_tc_38_so(this); return false;">Why does this amount seem low?</a></td></tr>'); b.push("</table></a>"); b.push("</div>") } b.push('<div class="clearb"></div>') } b.push("</div>"); document.getElementById("divDir").innerHTML += b.join("") } l = oGDrivingResult.routes[0].legs[h - 1]; b = oGDrivingResult.routes[0].legs[0].start_address; d = l.end_address; document.getElementById("divRoute").innerHTML = ""; void 0 != a.tdt && (document.getElementById("divRoute").innerHTML = "This trip was calculated " + a.tdt + " at " + a.ttime + "<br /><br />"); b == d ? (h = Math.round(h / 2), h = oGDrivingResult.routes[0].legs[h].start_address, document.getElementById("divRoute").innerHTML += b + " to " + h + "<br />to " + d, document.getElementById("divMiniRoute").innerHTML = b + " to " + h + "<br />to " + d) : (document.getElementById("divRoute").innerHTML += b + " to " + d, document.getElementById("divMiniRoute").innerHTML = b + " to " + d); b = h = b = 0; void 0 != a.co2 ? b = a.co2 : ("D" == sFuelType ? (h = convertMetersToMiles(iGDistanceCity) / iMpgCity * dLBSGallonDiesel, b = convertMetersToMiles(iGDistanceHwy) / iMpgHwy * dLBSGallonDiesel) : (h = convertMetersToMiles(iGDistanceCity) / iMpgCity * dLBSGallonFuel, b = convertMetersToMiles(iGDistanceHwy) / iMpgHwy * dLBSGallonFuel), b = Math.round(h + b)); document.getElementById("divTotalPounds").innerHTML = b + " lbs"; document.getElementById("divMiniTotalPounds").innerHTML = b + " lbs"; void 0 !== a.rows ? (dTotalGallons = a.tg, document.getElementById("divTotalDistance").innerHTML = formatMeters(iGDistance), document.getElementById("divMiniTotalDistance").innerHTML = formatMeters(iGDistance), document.getElementById("divTotalGallons").innerHTML = formatFuelVolume(dTotalGallons), document.getElementById("divMiniTotalGallons").innerHTML = formatFuelVolume(dTotalGallons), h = k = d = 0, m = convertMetersToMiles(iGDistance), void 0 != a.tucu && (b = [], b.push('<div class="sgas' + oFlag[(c - 1) % 4].css + '">'), b.push('<table cellspacing="0" style="width: 100%;"><tr>'), b.push('<td class="ftd' + oFlag[(c - 1) % 4].css + '"><span class="flink">Top<br />Up<br />Fill</span></td>'), b.push('<td class="sgasf2">'), void 0 != a.es[0].station_nm ? (b.push('<span style="font-size: 11pt;"><b>' + a.es[0].station_nm + "</b></span>"), b.push("<br />"), b.push(a.es[0].address + "<br />"), b.push(a.es[0].city + ", " + a.es[0].state + "")) : b.push('<span style="font-size: 11pt;"><b>Area Average</b></span>'), b.push("</td>"), b.push('<td class="fillp">'), b.push('<table cellspacing="0" cellpadding="0" align="right">'), "lkm" == sMPGUnit && 10 > a.es[0].price ? (b.push('<tr><td cost="' + a.es[0].price + '" align="right">' + formatGasPrice3(a.es[0].pu, a.es[0].pc, "mpg", "s") + "</td></tr>"), b.push("<tr><td>" + formatGasPrice3(a.es[0].pu, a.es[0].pc, "lkm", "e") + "</td></tr>"), e = '<br /><span class="sgasf3cur">CAN</span>') : "mpg" == sMPGUnit && 10 < a.es[0].price ? (b.push('<tr><td cost="' + a.es[0].price + '" align="right">' + formatGasPrice3(a.es[0].pu, a.es[0].pc, "lkm", "s") + "</td></tr>"), b.push("<tr><td>" + formatGasPrice3(a.es[0].pu, a.es[0].pc, "mpg", "e") + "</td></tr>"), e = '<br /><span class="sgasf3cur">USD</span>') : "mpig" == sMPGUnit ? (10 > a.es[0].price ? b.push('<tr><td cost="' + a.es[0].price + '" align="right">' + formatGasPrice3(a.es[0].pu, a.es[0].pc, "mpg", "s") + "</td></tr>") : b.push('<tr><td cost="' + a.es[0].price + '" align="right">' + formatGasPrice3(a.es[0].pu, a.es[0].pc, "lkm", "s") + "</td></tr>"), b.push("<tr><td>" + formatGasPrice3(a.es[0].pu, a.es[0].pc, "mpig", "e") + "</td></tr>"), e = '<br /><span class="sgasf3cur">CAN</span>') : (b.push('<tr><td cost="' + a.es[0].price + '" align="right">' + formatGasPrice3(a.es[0].pu, a.es[0].pc, sMPGUnit, "s") + "</td></tr>"), e = ""), b.push('<tr><td class="fillg" align="right">' + formatFuelVolume2(a.tug, a.es[0].price) + "</td></tr>"), b.push("</table></td>"), b.push('<td class="fillc">'), b.push('<span class="sgasf3">$' + formatCurrency("mpg" == sMPGUnit ? a.tucu : a.tucc) + "</span>" + e + "</td>"), b.push("</tr></table>"), b.push("</div>"), document.getElementById("divDir").innerHTML += b.join("")), "mpg" == sMPGUnit && (h = a.tcu, d = a.tsu, k = d / h), "lkm" == sMPGUnit && (h = a.tcc, d = a.tsc, k = d / h), "mpig" == sMPGUnit && (h = a.tcc, d = a.tsc, k = d / h), document.getElementById("divTotalCost").innerHTML = formatCurrency(h), document.getElementById("divMiniTotalCost").innerHTML = formatCurrency(h), 2 <= d && 0.01 <= k && 100 <= m ? (document.getElementById("divTotalSavings").innerHTML = formatCurrency(d), document.getElementById("divSavings").style.display = "") : (document.getElementById("divTotalSavings").innerHTML = "", document.getElementById("divSavings").style.display = "none"), document.getElementById("divTCRight").style.height = "", document.getElementById("tblNoFills").style.display = "none", hideLoading(), _tc_menu(1), document.getElementById("divNavigation").style.display = "", document.getElementById("divPrice").style.display = "none") : (b = h = 0, dTotalGallons = a.tg, "mpg" == sMPGUnit && (h = a.tcu, b = a.spu), "lkm" == sMPGUnit && (h = a.tcc, b = a.spc), "mpig" == sMPGUnit && (h = a.tcc, b = convertLitresToImpGallons(a.spc) / 100), document.getElementById("divTotalCost").innerHTML = formatCurrency(h), document.getElementById("divMiniTotalCost").innerHTML = formatMeters(h), document.getElementById("divTotalDistance").innerHTML = formatMeters(iGDistance), document.getElementById("divMiniTotalDistance").innerHTML = formatMeters(iGDistance), document.getElementById("divTotalGallons").innerHTML = formatFuelVolume(dTotalGallons), document.getElementById("divMiniTotalGallons").innerHTML = formatFuelVolume(dTotalGallons), document.getElementById("divPriceGas").setAttribute("cost", b), document.getElementById("divPriceGas").setAttribute("org", b), "lkm" == sMPGUnit && 10 > a.es[0].price ? (document.getElementById("divPriceGas").innerHTML = '<table cellpadding="0" cellspacing="0" align="center" style="margin: 0 auto 0 auto;"><tr><td>' + formatGasPrice3(a.spu, a.spc, "mpg", "cg") + "</td></tr>", document.getElementById("divPriceGas").innerHTML += "<tr><td>" + formatGasPrice3(a.spu, a.spc, "lkm", "e") + "</td></tr></table>") : "mpg" == sMPGUnit && 10 < a.es[0].price ? (document.getElementById("divPriceGas").innerHTML = '<table cellpadding="0" cellspacing="0" align="center" style="margin: 0 auto 0 auto;"><tr><td>' + formatGasPrice3(a.spu, a.spc, "lkm", "cg") + "</td></tr>", document.getElementById("divPriceGas").innerHTML += "<tr><td>" + formatGasPrice3(a.spu, a.spc, "mpg", "e") + "</td></tr></table>") : "mpig" == sMPGUnit ? (10 > a.es[0].price ? document.getElementById("divPriceGas").innerHTML = '<table cellpadding="0" cellspacing="0" align="center" style="margin: 0 auto 0 auto;"><tr><td>' + formatGasPrice3(a.spu, a.spc, "mpg", "cg") + "</td></tr>" : document.getElementById("divPriceGas").innerHTML = '<table cellpadding="0" cellspacing="0" align="center" style="margin: 0 auto 0 auto;"><tr><td>' + formatGasPrice3(a.spu, a.spc, "lkm", "cg") + "</td></tr>", document.getElementById("divPriceGas").innerHTML += "<tr><td>" + formatGasPrice3(a.spu, a.spc, "mpig", "e") + "</td></tr></table>") : document.getElementById("divPriceGas").innerHTML = formatGasPrice3(a.spu, a.spc, sMPGUnit, "cg"), document.getElementById("tblNoFills").style.display = "", document.getElementById("divTCRight").style.height = "", document.getElementById("divSavings").style.display = "none", hideLoading(), _tc_menu(1), document.getElementById("divPrice").style.display = "", document.getElementById("divNavigation").style.display = ""); _tc_99_sh(); setTripID(a.ti); document.getElementById("divDir").innerHTML += '<div><div class="rpoint"><table><tr><td style="width: 40px; font-size: 0px; text-align: center;"><img src="http://maps.google.com/intl/en_ALL/mapfiles/marker_green' + oLetter[c] + '.png"></td><td class="btext">' + l.end_address + "</td></div></div>"; document.getElementById("txtLink").value = "http://" + window.location.host + window.location.pathname + "?ti=" + sTripID } } 

function createFillMarker(a, b, c) { var d = new GMarker(a, { icon: b }); d.fill = c.fill; d.id = c.id; d.price = c.price; aFillListeners.push(GEvent.addListener(d, "click", function () { getFillStationInfo(d.fill) })); oFills[d.fill] = d; oGMap.addOverlay(d) } function createFillMarkerv3(a, b) { var c = 0, d = new google.maps.Marker({ map: oGMap, icon: a, position: new google.maps.LatLng(b.lat, b["long"]) }); d.fill = b.fill; d.id = b.id; d.price = b.price; google.maps.event.addListener(d, "click", function () { getFillStationInfo(d.fill) }); c = setZIndex2(d); d.setZIndex(c); oFills[d.fill] = d } function getGDirectionsError(a) { switch (a) { case 400: document.getElementById("divError").innerHTML = "Directions could not be successfully processed. Please verify all addresses."; break; case 500: document.getElementById("divError").innerHTML = "Directions could not be successfully processed. Please verify all addresses."; break; case 601: document.getElementById("divError").innerHTML = "Empty address was specified as input. Please verify all addresses."; break; case 602: document.getElementById("divError").innerHTML = "At least one address is unknown. Please verify all addresses."; break; case 603: document.getElementById("divError").innerHTML = "Directions cannot be returned due to legal or contractual reasons."; break; case 604: document.getElementById("divError").innerHTML = "Could not compute directions between the locations."; break; case 610: document.getElementById("divError").innerHTML = "Bad key."; break; case 620: document.getElementById("divError").innerHTML = "Too many requests. Please try again later."; break; default: document.getElementById("divError").innerHTML = "Could not retrieve directions at this time." } hideLoading(); document.getElementById("divError").style.display = "" } function calcDistanceLatLng(a, b) { return google.maps.geometry.spherical.computeDistanceBetween(a, b) } function getGDirectionsRouteBoxer() { oGBoxes = routeBoxer.box(oGDrivingResult.routes[0].overview_path, distance); getTripStationsRouteBoxer() } 
function getGDirectionsComplete() { var a = 0, b = 0, c = 0; aHwyBB = []; aStepBoxes = []; for (var d = a = 0, b = oGDrivingResult.routes[0].legs, c = 0; c < b.length; ++c) a += b[c].distance.value; iGDistance = a; iGDistanceHwy = iGDistanceCity = 0; oGPoly = []; oGPolyPointCount = 0; c = oGDrivingResult.routes[0].legs.length; aRoutes = []; var e = 0, f = oGDrivingResult.routes[0].legs[0]; aRoutes.push("<l><n>0</n><lat>" + f.start_location.lat().toFixed(6) + "</lat><lng>" + f.start_location.lng().toFixed(6) + "</lng><d>0</d><v>0</v></l>"); for (a = 0; a < c; a++) { var f = oGDrivingResult.routes[0].legs[a], g = f.steps.length, h = f.end_location; parseInt(calcDistanceLatLng(f.start_location, f.end_location)); for (b = 0; b < g; b++) { var k = f.steps[b], l = k.distance.value, m = l / k.duration.value, d = d + l, e = e + k.path.length; oGPoly.push({ leg: a + 1, dist: d, path: k.path }); oGPolyPointCount += k.path.length; 17.43456 > m ? iGDistanceCity += l : iGDistanceHwy += l; aStepBoxes.push(createBoundingBoxFromStep(k.path, a + 1)) } aRoutes.push("<l><n>" + (a + 1) + "</n><lat>" + h.lat().toFixed(6) + "</lat><lng>" + h.lng().toFixed(6) + "</lng><d>" + parseInt(convertMetersToMiles(d)) + "</d><v>" + e + "</v></l>") } iGDistanceHwyPct = Math.round(iGDistanceHwy / iGDistance * 100); iGDistanceCityPct = 100 - iGDistanceHwy; !1 == bLoadTrip ? (getTripStations(), _tc_remove_track_box(), _tc_load_track_box()) : processTrip(sBAM) } 
function tempAddPolyline(a, b) { debugger; (new google.maps.Polyline({ path: [a, b], strokeColor: "#FF0000", strokeOpacity: 1, strokeWeight: 2 })).setMap(oGMap) } function createBoundingBoxFromStep(a, b) { var c = {}; manyStepBounds = new google.maps.LatLngBounds; for (var d = a.length, e = 0; e < d; e++) manyStepBounds.extend(a[e]); c.MinY = manyStepBounds.getSouthWest().lat() - 0.05; c.MaxY = manyStepBounds.getNorthEast().lat() + 0.05; c.MinX = manyStepBounds.getSouthWest().lng() - 0.05; c.MaxX = manyStepBounds.getNorthEast().lng() + 0.05; c.Leg = b; return c } function addDestination() { var a = aDestinations.length, b = a + 1; if (11 > a) { var c = document.createElement("div"); c.setAttribute("class", "dest"); c.id = "divDest" + b; var d = document.createElement("div"); d.setAttribute("class", "destlb"); d.className = "destlb"; d.id = "divDestLabel" + b; d.innerHTML = b; var e = document.createElement("input"); e.setAttribute("type", "text"); e.id = "tdDest" + b; e.className = "desttb"; e.setAttribute("class", "desttb"); e.onkeyup = _tc_10_ac; e.onkeydown = keydown; e.onblur = _tc_09_tbb; var f = document.createElement("a"); f.onclick = function () { _tc_32_rd(b) }; f.className = "linkdest"; f.innerHTML = "x"; f.onmouseover = "this.style.cursor = 'pointer';"; f.id = "divDestRemove" + b; f.setAttribute("href", "javascript:void(0);"); c.appendChild(d); c.appendChild(e); c.appendChild(f); document.getElementById("divDests").insertBefore(c, document.getElementById("divEnd")); aDestinations[a] = b } else alert("Destination limit reached.") } function removeDestination(a) { var b = aDestinations.slice(0, a - 1), c = aDestinations.length, d = 0, e = 0, d = document.getElementById("divDests"), e = document.getElementById("divDest" + a); d.removeChild(e); for (d = a + 1; d <= c; d++) e = d - 1, b.push(e), document.getElementById("divDest" + d).id = "divDest" + e, document.getElementById("tdDest" + d).id = "tdDest" + e, document.getElementById("divDestLabel" + d).innerHTML = e, document.getElementById("divDestLabel" + d).id = "divDestLabel" + e, document.getElementById("divDestRemove" + d).onclick = new Function("_tc_32_rd(" + e + ");"), document.getElementById("divDestRemove" + d).id = "divDestRemove" + e; aDestinations = b } function initializeOutput() { document.getElementById("divSummary").style.display = "none"; document.getElementById("divDir").innerHTML = ""; document.getElementById("tblNoFills").style.display = "none" } function clearOutput() { document.getElementById("divSummary").style.display = "none"; document.getElementById("divDir").innerHTML = ""; document.getElementById("tblNoFills").style.display = "none" } function toggleVehicleSummary() { var a = document.getElementById("divVehicleSummary"), b = document.getElementById("divVehicleSelector"); "" == b.style.display ? (b.style.display = "none", a.style.display = "") : "none" == b.style.display && (b.style.display = "", a.style.display = "none") } function toggleVehicleInfo(a) { sVehicleView = a; switch (a) { case "choose": document.getElementById("divVehicleSelector").style.display = ""; document.getElementById("divVehicleCustom").style.display = "none"; break; case "custom": document.getElementById("divVehicleSelector").style.display = "none", document.getElementById("divVehicleCustom").style.display = "" } } function toggleReturnTrip(a) { bReturnTrip = a } function toggleRoute(a) { a = document.getElementById("divR" + a); "" == a.style.display ? a.style.display = "none" : "none" == a.style.display && (a.style.display = "") } function toggleDirections(a, b, c, d) { var e = d; !1 == d ? (d = "none", e = !0, a.innerHTML = "Show Directions") : (d = "", e = !1, a.innerHTML = "Hide Directions"); for (iX = 0; iX < c; iX++) document.getElementById("divR" + b + "S" + iX).style.display = d; a.onclick = function () { _tc_30_td(a, b, c, e) }; _tc_99_sh() } function toggleTripSummary() { var a = document.getElementById("divTripSummary"); "" == a.style.display ? a.style.display = "none" : "none" == a.style.display && (a.style.display = "") } function isNumKey(a, b) { var c = a.which ? a.which : a.keyCode; return 13 != c && 31 < c && (48 > c || 57 < c) ? 46 == c ? -1 == b.value.indexOf(".") ? !0 : !1 : !1 : !0 } var iAC = -1, sSearch = "", bShowingAutoComplete = !1, iMinKeys = 1; function autocomplete(a) { var b, c, d; a = getEvent(a); c = getKeycode(a); b = getSrcObj(a); d = b.value; oAutoComplete.elmid = b.id; if (d.length >= iMinKeys && 9 != c && 38 != c && 40 != c && 13 != c && 33 != c && 34 != c && 27 != c) a = _tc_substr(d, 0, iMinKeys), void 0 === oAutoComplete.search || oAutoComplete.search != a ? (oAutoComplete = {}, oAutoComplete.search = a, populateAC(a)) : loadAC(); else return cancelBubble(a) } function populateAC(a) { GasBuddy_ASPX.TripCalculatorControlv2.ac(a, 20, populateAC_Complete, populateAC_Failed) } function populateAC_Complete(a) { a = eval("(" + a.value + ")"); oAutoComplete.results = a.rows; loadAC() } function populateAC_Failed(a) { } function loadAC() { if (void 0 !== oAutoComplete.results && void 0 != oAutoComplete.elmid && null != oAutoComplete.elmid) { var a = document.getElementById(oAutoComplete.elmid), a = findObjectArraySection(oAutoComplete.results, a.value); writeResults(a) } else bShowingAutoComplete = !1, document.getElementById("divACContainer").style.display = "none" } function findObjectArraySection(a, b) { var c = a.length, d = 0, e = c - 1, f = !1, g, h, k, l = b.length, m = toLower(b), n = Math.round; toLower(_tc_substr(a[d].n, 0, l)) == m ? (f = !0, g = d) : toLower(_tc_substr(a[e].n, 0, l)) == m ? (f = !0, g = e) : g = n(e / 2); for (; !f && (k = toLower(_tc_substr(a[g].n, 0, l)), h = g, k > m ? (g = d + n((g - d) / 2), e = h) : k < m ? (g = e - n((e - g) / 2), d = h) : f = !0, !(1 >= e - d) || f) ;); if (f) { for (d = g; d + 1 < c && toLower(_tc_substr(a[d + 1].n, 0, l)) == m;) d++; c = d; for (d = g; 0 <= d - 1 && toLower(_tc_substr(a[d - 1].n, 0, l)) == m;) d--; g = {}; l = d; m = 0; for (l; l <= c; l++) g[m] = a[l], m++; g.length = m; 15 < m && sortResultsPopulation(g, m); return g } return null } function writeResults(a) { document.getElementById("divACResults").innerHTML = ""; var b = [], c = document.getElementById(oAutoComplete.elmid), c = tcGetBounds(c), d = bIE ? getScrollTop() : 0, e = c.left, d = c.top + d, c = document.getElementById("divACContainer"); c.style.top = d + 21 + "px"; c.style.left = e + "px"; if (null != a) { d = a.length; e = 0; for (b.push('<table cellspacing="0" style="margin: 2px; width: 98%;">') ; e < d && 15 > e;) b.push("<tr>"), b.push('<td id="res' + e + '" '), 0 == e && b.push(" class=hi "), b.push('style="white-space: nowrap; font-size: 12px;">'), b.push(a[e].n + ", " + a[e].s), b.push("</td>"), b.push("</tr>"), e++; b.push("</table>"); if (!0 == bIE6) { a = document.getElementsByTagName("select"); for (var d = a.length, f = 0, f = 0; f < d; f++) a[f].style.visibility = "hidden" } document.getElementById("divACResults").innerHTML = b.join(""); iResultCount = e; for (e = 0; e < iResultCount;) b = document.getElementById("res" + e), b.onmouseover = resMouseOver, b.style.cursor = "pointer", e++; iCurResultIndex = 0; oSelectedResult = document.getElementById("res0"); bShowingAutoComplete = !0; c.style.display = "" } else iResultCount = 0, bShowingAutoComplete = !1, c.style.display = "none" } function resMouseOver(a) { a = getSrcObj(a); focusResult(a.id.replace("res", ""), !1) } function focusResult(a, b) { oSelectedResult.style.backgroundColor = "transparent"; oSelectedResult.style.textDecoration = "none"; oSelectedResult.style.color = "black"; oSelectedResult = document.getElementById("res" + a); oSelectedResult.style.backgroundColor = "#FAFAD2"; oSelectedResult.style.textDecoration = "underline"; oSelectedResult.style.color = "blue"; iCurResultIndex = myParseInt(a); b && oSelectedResult.scrollIntoView(!1) } function PickResult(a) { 0 < iResultCount && bShowingAutoComplete && (document.getElementById(oAutoComplete.elmid).value = a.innerHTML); hideResultsDiv() } function hideResultsDiv() { bShowingAutoComplete = !1; document.getElementById("divACContainer").style.display = "none"; if (!0 == bIE6) for (var a = document.getElementsByTagName("select"), b = a.length, c = 0, c = 0; c < b; c++) a[c].style.visibility = "" } function textboxBlur() { bShowingAutoComplete && PickResult(oSelectedResult) } function textboxFocus() { hideResultsDiv() } function keydown(a) { a = getEvent(a); var b = getKeycode(a); if (bShowingAutoComplete && (38 == b || 40 == b || 13 == b || 33 == b || 34 == b || 27 == b)) return 33 == b && adjustSelectedResult(-iPgUpDnStep), 34 == b && adjustSelectedResult(iPgUpDnStep), 38 == b && adjustSelectedResult(-1), 40 == b && adjustSelectedResult(1), 13 == b && PickResult(oSelectedResult), 27 == b && hideResultsDiv(), cancelBubble(a); if (13 == b) return cancelBubble(a) } function cancelBubble(a) { a.which && (a.preventDefault(), a.stopPropagation()); a.cancelBubble = !0; return a.returnValue = !1 } function adjustSelectedResult(a) { var b = iCurResultIndex + a; 0 > a ? 0 < b ? iCurResultIndex = b : iCurResultIndex = 0 : b < iResultCount ? iCurResultIndex = b : iCurResultIndex = iResultCount - 1; focusResult(iCurResultIndex, !0) } function sortResultsPopulation(a, b) { for (var c = 0; c < b - 1; c++) for (var d = c + 1; d < b; d++) if (a[d].p > a[c].p) { var e = a[c]; a[c] = a[d]; a[d] = e } } function getFillStationInfo(a) { iFillClick = a; GasBuddy_ASPX.TripCalculatorControlv2.GetStationInfo(oFills[iFillClick].id, sFuelType, getFillStationInfo_Complete) } function getFillStationInfo_Complete(a) { var b = eval("(" + a.value + ")"); a = ""; void 0 !== b.rows && null != b.rows && void 0 !== b.rows[0] ? a = "<div><b>Fill #" + iFillClick + "</b>" + formatStationDetials(b.rows[0]) : (b = oFills[iFillClick].price, a = "<div><b>Fill #" + iFillClick + "</b><br />", a += '<table cellpadding=0 cellspacing=0 style="background-color: #FFFFFF; layer-background-color: #FFFFFF;"><tr><td>', a += "<b>Area Average:</b>&nbsp;</td><td>" + formatGasPrice2(b, "b") + "</td>", "lkm" == sMPGUnit && 10 > b && (a += '<td style="padding-left: 2px;">' + formatGasPrice2(convertPriceUSToCDN(100 * convertLitresToGallons(addOffset(b))), "e") + "</td>"), "mpg" == sMPGUnit && 10 < b && (a += '<td style="padding-left: 2px;">' + formatGasPrice2(convertPriceCDNToUS(convertGallonsToLitres(b / 100)), "e") + "</td>"), a += "</tr>", a += '<tr><td colspan="100%">No known stations in this area.<td></tr>', a += "</table></div>"); oGInfoWindow.setContent(a); oGInfoWindow.open(oGMap, oFills[iFillClick]); iFillClick = -1 } function getFillStationInfo_Failed(a) { } function formatStationDetials(a) { var b = "", b = '<div style="white-space:nowrap; font-size: 12px; font-family:Arial,Verdana;text-align: left;"><table cellpadding=0 cellspacing=0 style="background-color: #FFFFFF; layer-background-color: #FFFFFF;"><tr><td colspan="2">' + ('<span style="font-family: Arial, Helvetica, Verdana; font-size: 12px;"><b>' + a.station_nm + "</b>"); a.station_alias ? b += " (" + a.station_nm + ")" : null; b += "</span><br />" + a.address + "<br />" + a.city + ", " + a.state + "<br />"; a.cross2 ? b += "Cross: " + a.cross2 + "<br />" : null; b += "</td></tr></table>"; 1 == a.flag ? (b += '<table cellspacing="0" cellpadding="0">', "D" != sFuelType ? (0 < a.regular_price && (b += "<tr><td>Regular:&nbsp;</td><td>" + formatGasPrice2(a.regular_price, "b") + "</td>", "lkm" == sMPGUnit && 10 > a.regular_price && (b += '<td style="padding-left: 2px;">' + formatGasPrice2(convertPriceUSToCDN(100 * convertLitresToGallons(addOffset(a.regular_price))), "e") + "</td>"), "mpg" == sMPGUnit && 10 < a.regular_price && (b += '<td style="padding-left: 2px;">' + formatGasPrice2(convertPriceCDNToUS(convertGallonsToLitres(a.regular_price / 100)), "e") + "</td>"), b += "</tr>"), 0 < a.midgrade_price && (b += "<tr><td>Midgrade:&nbsp;</td><td>" + formatGasPrice2(a.midgrade_price, "b") + "</td>", "lkm" == sMPGUnit && 10 > a.midgrade_price && (b += '<td style="padding-left: 2px;">' + formatGasPrice2(convertPriceUSToCDN(100 * convertLitresToGallons(addOffset(a.midgrade_price))), "e") + "</td>"), "mpg" == sMPGUnit && 10 < a.midgrade_price && (b += '<td style="padding-left: 2px;">' + formatGasPrice2(convertPriceCDNToUS(convertGallonsToLitres(a.midgrade_price / 100)), "e") + "</td>"), b += "</tr>"), 0 < a.premium_price && (b += "<tr><td>Premium:&nbsp;</td><td>" + formatGasPrice2(a.premium_price, "b") + "</td>", "lkm" == sMPGUnit && 10 > a.premium_price && (b += '<td style="padding-left: 2px;">' + formatGasPrice2(convertPriceUSToCDN(100 * convertLitresToGallons(addOffset(a.premium_price))), "e") + "</td>"), "mpg" == sMPGUnit && 10 < a.premium_price && (b += '<td style="padding-left: 2px;">' + formatGasPrice2(convertPriceCDNToUS(convertGallonsToLitres(a.premium_price / 100)), "e") + "</td>"), b += "</tr>")) : 0 < a.diesel_price && (b += "<tr><td>Diesel:&nbsp;</td><td>" + formatGasPrice2(a.diesel_price, "b") + "</td>", "lkm" == sMPGUnit && 10 > a.diesel_price && (b += '<td style="padding-left: 2px;">' + formatGasPrice2(convertPriceUSToCDN(100 * convertLitresToGallons(addOffset(a.diesel_price))), "e") + "</td>"), "mpg" == sMPGUnit && 10 < a.diesel_price && (b += '<td style="padding-left: 2px;">' + formatGasPrice2(convertPriceCDNToUS(convertGallonsToLitres(a.diesel_price / 100)), "e") + "</td>"), b += "</tr>"), b += "</table>") : (b += '<table cellpadding=0 cellspacing=0 style="background-color: #FFFFFF; layer-background-color: #FFFFFF;">', b += "<tr><td>" + oFuelType[sFuelType] + ":&nbsp;</td><td>" + formatGasPrice2(a.avg_price, "b") + "</td><td>&nbsp;(estimated)</td>", b += "</td></tr></table>"); return b += "</div>" } function toggleOtherOptions(a) { var b = document.getElementById("divOtherOptions"); "absolute" == b.style.position ? (b.style.position = "", b.style.left = "", a.innerHTML = "Hide") : (b.style.position = "absolute", b.style.left = "-1000px", a.innerHTML = "Show") } function setVehicleMPG(a) { "" != a.value ? parseVehicleString(a.value) : (dCo2 = dTankMiles = dTank = iMpgHwy = iMpgCity = iVehicleID = 0, document.getElementById("tdCityMpg").innerHTML = "-", document.getElementById("tdHwyMpg").innerHTML = "-", document.getElementById("tdTank").innerHTML = "-", document.getElementById("tdFuelType").innerHTML = "-") } function parseVehicleString(a) { a = a.split(","); setDistanceUnit(); setFuelEconomyUnit(); iMpgCity = a[0]; iMpgHwy = a[1]; dTank = a[2]; dTankMiles = iMpgHwy * dTank; sFuelType = a[3]; iVehicleID = a[4]; dCo2 = a[5]; displayMPG(); displayTank(); displayFuelType(); displayTankMiles() } function saveMPG(a) { var b = a.id; a = a.value; "lkm" == sMPGUnit && (a = _tc_round(convertLPKMToMPG(a), 1)); "mpig" == sMPGUnit && (a = _tc_round(convertMPIGToMPG(a), 1)); "txtCityMpg" == b && (iMpgCity = a); "txtHwyMpg" == b && (iMpgHwy = parseFloat(a), dTankMiles = dTank * iMpgHwy, displayTankMiles()); iVehicleID = 0 } function toggleDistanceUnit() { setDistanceUnit(); displayMPG(); displayTank(); displayFuelType(); displayTankMiles(); 0 < iGDistance && (document.getElementById("divTotalDistance").innerHTML = formatMeters(iGDistance), document.getElementById("divMiniTotalDistance").innerHTML = formatMeters(iGDistance)); updateDirDistance() } function toggleGasStations() { setShowStations(); bShowStations ? loadGasStations() : clearGasStations() } function updateDirDistance() { if (void 0 != oGDir) for (var a = oGDir.getNumRoutes(), b = 0, c = 0, d = 0, e, b = 0; b < a; b++) { var f = oGDir.getRoute(b).getNumSteps(); e = document.getElementById("divR" + b + "D"); d = e.getAttribute("dist"); e.innerHTML = formatMeters(d); for (c = 0; c < f; c++) e = document.getElementById("divR" + b + "S" + c + "D"), d = e.getAttribute("dist"), e.innerHTML = formatMeters(d) } } function setDistanceUnit() { for (var a = 0, b = document.getElementById("divRBDist").getElementsByTagName("input"), c = b.length, a = 0; a < c; a++) b[a].checked && (sDistanceUnit = b[a].value); return sDistanceUnit } function initDistanceUnit() { for (var a = 0, b = document.getElementById("divRBDist").getElementsByTagName("input"), c = b.length, a = 0; a < c; a++) b[a].value == sDistanceUnit && (b[a].checked = !0); return sDistanceUnit } function setShowStations() { for (var a = 0, b = document.getElementById("divRBstations").getElementsByTagName("input"), c = b.length, a = 0; a < c; a++) b[a].checked && (bShowStations = "1" == b[a].value ? !0 : !1); return bShowStations } function toggleFuelEconomyUnit() { setFuelEconomyUnit(); displayMPG(); displayTank(); displayFuelType(); displayTankMiles(); 0 < dTotalGallons && (document.getElementById("divTotalGallons").innerHTML = formatFuelVolume(_tc_round(dTotalGallons, 2)), document.getElementById("divMiniTotalGallons").innerHTML = formatFuelVolume(_tc_round(dTotalGallons, 2))) } function setFuelEconomyUnit() { for (var a = 0, b = document.getElementById("divRBFuelEc").getElementsByTagName("input"), c = b.length, a = 0; a < c; a++) b[a].checked && (sMPGUnit = b[a].value); return sMPGUnit } function initFuelEconomyUnit() { for (var a = 0, b = document.getElementById("divRBFuelEc").getElementsByTagName("input"), c = b.length, a = 0; a < c; a++) b[a].value == sMPGUnit && (b[a].checked = !0); return sMPGUnit } function initReturn() { for (var a = 0, b = document.getElementById("divReturnTrip").getElementsByTagName("input"), c = b.length, a = 0; a < c; a++) b[a].value == bReturnTrip && (b[a].checked = !0); return bReturnTrip } function setFuelType(a) { sFuelType = a.value; dCo2 = "D" == a.value ? dLBSGallonDiesel : dLBSGallonFuel } function displayMPG() { var a = 0; "mpg" == sMPGUnit && (0 < iMpgCity && (a = iMpgCity, document.getElementById("tdCityMpg").innerHTML = a, document.getElementById("txtCityMpg").value = a), 0 < iMpgHwy && (a = iMpgHwy, document.getElementById("tdHwyMpg").innerHTML = a, document.getElementById("txtHwyMpg").value = a), document.getElementById("tdFEUnit").innerHTML = "mpg", document.getElementById("tdFEUnit2").innerHTML = "mpg"); "lkm" == sMPGUnit && (0 < iMpgCity && (a = _tc_round(convertMPGToLPKM(iMpgCity), 1), document.getElementById("tdCityMpg").innerHTML = a, document.getElementById("txtCityMpg").value = a), 0 < iMpgHwy && (a = _tc_round(convertMPGToLPKM(iMpgHwy), 1), document.getElementById("tdHwyMpg").innerHTML = a, document.getElementById("txtHwyMpg").value = a), document.getElementById("tdFEUnit").innerHTML = "L / 100 km", document.getElementById("tdFEUnit2").innerHTML = "L / 100 km"); "mpig" == sMPGUnit && (0 < iMpgCity && (a = _tc_round(convertMPGToMPIG(iMpgCity), 1), document.getElementById("tdCityMpg").innerHTML = a, document.getElementById("txtCityMpg").value = a), 0 < iMpgHwy && (a = _tc_round(convertMPGToMPIG(iMpgHwy), 1), document.getElementById("tdHwyMpg").innerHTML = a, document.getElementById("txtHwyMpg").value = a), document.getElementById("tdFEUnit").innerHTML = "mpg", document.getElementById("tdFEUnit2").innerHTML = "mpg") } function displayTank() { var a = 0; "mpg" == sMPGUnit && (a = dTank, document.getElementById("tdTank").innerHTML = a, document.getElementById("txtTank").value = a, document.getElementById("tdVolume").innerHTML = "gal", document.getElementById("divVolume").innerHTML = "g"); "lkm" == sMPGUnit && (a = _tc_round(convertGallonsToLitres(dTank), 1), document.getElementById("tdTank").innerHTML = a, document.getElementById("txtTank").value = a, document.getElementById("tdVolume").innerHTML = "litres", document.getElementById("divVolume").innerHTML = "l"); "mpig" == sMPGUnit && (a = _tc_round(convertImpGallonsToGallons(dTank), 1), document.getElementById("tdTank").innerHTML = a, document.getElementById("txtTank").value = a, document.getElementById("tdVolume").innerHTML = "gal", document.getElementById("divVolume").innerHTML = "g") } function saveTank(a) { a = a.value; "lkm" == sMPGUnit && (a = _tc_round(convertLitresToGallons(a), 1)); "mpig" == sMPGUnit && (a = _tc_round(convertImpGallonsToGallons(a), 1)); dTank = a; dTankMiles = dTank * iMpgHwy; displayTankMiles(); iVehicleID = 0 } function displayFuelType() { var a = "", a = oFuelType[sFuelType]; document.getElementById("tdFuelType").innerHTML = a; document.getElementById("ddlFuelType").value = sFuelType } function displayTankMiles() { var a = 0; "m" == sDistanceUnit && (document.getElementById("txtTankDistance").value = dTankMiles, document.getElementById("divTankMiles").innerHTML = "Mi"); "km" == sDistanceUnit && (a = _tc_round(convertMilesToKMs(dTankMiles), 1), document.getElementById("txtTankDistance").value = a, document.getElementById("divTankMiles").innerHTML = "Km") } function getFuelEconomyUnit() { for (var a = 0, b = document.getElementById("divRBFuelEc").getElementsByTagName("input"), c = b.length, a = 0; a < c; a++) if (b[a].checked) return b[a].value; return "m" } function toggleDirectionStatus() { for (var a = 0, b = document.getElementById("divRBDD").getElementsByTagName("input"), c = b.length, d, a = 0; a < c; a++) if (b[a].checked) { d = b[a].value; break } bShowDirections = "true" == d ? new Boolean(!0) : new Boolean(!1); b = oGDrivingResult.routes[0].legs.length; for (a = 0; a < b; a++) c = oGDrivingResult.routes[0].legs[a].steps.length, _tc_30_td(document.getElementById("hlR" + a), a, c, bShowDirections) } function toggleMembershipRequired() { for (var a = 0, b = document.getElementById("divRBMR").getElementsByTagName("input"), c = b.length, d, a = 0; a < c; a++) if (b[a].checked) { d = b[a].value; break } bMembershipRequired = "true" == d ? new Boolean(!0) : new Boolean(!1) } function formatMeters(a) { var b = " km"; a /= 1E3; "m" == sDistanceUnit ? (a *= dKmToMiles, b = " mi", 0.1894 > a ? (a = Math.round(5280 * a), b = " ft") : a = _tc_round(a, 1)) : 0.2 >= a ? (a *= 1E3, a = Math.round(a), b = " m") : a = _tc_round(a, 1); return a + b } function updateFillOutput() { for (var a = oGDir.getNumRoutes(), b = oGDir.getNumRoutes(), c = 0, d = 0, e, f, g = 0, h = 0, k = "", c = 0; c < a; c++) for (b = oRouteFills[c], d = 1; d <= b; d++) e = document.getElementById("tdR" + c + "C" + d), f = document.getElementById("tdR" + c + "G" + d), g = parseFloat(e.getAttribute("cost")), k = e.getAttribute("est"), h = parseFloat(f.getAttribute("gal")), e.innerHTML = formatGasPrice(g) + k, f.innerHTML = formatFuelVolume(h) } function formatGasPrice3(a, b, c, d) { var e = "", f = "", g = 0, h = ""; "lkm" == c && (g = b); "mpg" == c && (g = a); "mpig" == c && (g = formatCurrency(convertLitresToImpGallons(b) / 100)); "s" == d && (e = "gp"); "b" == d && (e = "gpb"); "e" == d && (e = "gpe"); "cg" == d && (e = "gpcg", f = ' style="margin: 0 auto 0 auto;"'); 10 < g ? (g = g.toFixed(1), a = [], a.push('<table cellpadding="0" cellspacing="0" id="' + e + '"' + f + '><tr><td class="price">'), "e" == d && a.push("("), a.push(g + "&#162;"), "e" == d && a.push("/L CAN)"), a.push("</td></tr></table>")) : (4 == g.toString().length && (g += "9"), g = parseFloat(g), g = g.toFixed(3), b = _tc_substr(g, g.length - 1, g.length), g = _tc_substr(g, 0, g.length - 1), a = [], a.push('<table cellpadding="0" cellspacing="0" id="' + e + '"' + f + '><tr><td class="price">'), "e" == d && a.push("("), a.push("$" + g + "</td>"), a.push('<td class="sup">' + b + "</td>"), "e" == d && ("mpg" == c && a.push('<td class="price">/g USD)</td>'), "mpig" == c && a.push('<td class="price">/g CAN)</td>')), a.push("</tr></table>")); return h = a.join("") } function formatGasPrice2(a, b) { var c = "", d = ""; a = parseFloat(a); var e = ""; "s" == b && (c = "gp"); "b" == b && (c = "gpb"); "e" == b && (c = "gpe"); "cg" == b && (c = "gpcg", d = ' style="margin: 0 auto 0 auto;"'); if (10 < a) a = a.toFixed(1), e = [], e.push('<table cellpadding="0" cellspacing="0" id="' + c + '"' + d + '><tr><td class="price">'), "e" == b && e.push("("), e.push(a + "&#162;"), "e" == b && e.push("/L CAN)"), e.push("</td></tr></table>"); else { 4 == a.toString().length && (a = parseFloat(a + "9")); a = a.toFixed(3); var f = _tc_substr(a, a.length - 1, a.length); a = _tc_substr(a, 0, a.length - 1); e = []; e.push('<table cellpadding="0" cellspacing="0" id="' + c + '"' + d + '><tr><td class="price">'); "e" == b && e.push("("); e.push("$" + a + "</td>"); e.push('<td class="sup">' + f + "</td>"); "e" == b && ("mpg" == sMPGUnit && e.push('<td class="price">/g USD)</td>'), "mpig" == sMPGUnit && e.push('<td class="price">/g CAN)</td>')); e.push("</tr></table>") } return e = e.join("") } function formatFuelVolume(a) { switch (sMPGUnit) { case "mpg": a += " gal"; break; case "lkm": a = _tc_round(convertGallonsToLitres(a), 1) + " L"; break; case "mpig": a = _tc_round(convertImpGallonsToGallons(a), 1) + " gal" } return a } function formatFuelVolume2(a, b) { return 10 < b ? _tc_round(convertGallonsToLitres(a), 2) + " L" : _tc_round(a, 2) + " gal" } function formatFlagPrice(a) { var b = 4; 10 < a && (10 < a && 2 == a.toString().length && (a += ".0", b = 4), 100 < a && 3 == a.toString().length && (a += ".0", b = 5), 100 < a && (b = 5)); 10 > a && (a = 1 == a.toString().length ? a += ".00" : a, a = 3 == a.toString().length ? a += "0" : a); a = a.toString(); return a = a.substr(0, b) } function formatGasPrice(a) { switch (sMPGUnit) { case "mpg": 10 < a && (a = _tc_round(convertGallonsToLitres(parseFloat(a) / 100), 2)); a = a.toFixed(3); var b = _tc_substr(a, a.length - 1, a.length); a = _tc_substr(a, 0, a.length - 1); var c = []; c.push('<table cellpadding="0" cellspacing="0" align="right"><tr><td class="fillp2">'); c.push("$" + a + "</td>"); c.push('<td class="sup">' + b + "</td>"); c.push("</td></tr></table>"); a = c.join(""); break; case "lkm": 10 > a && (a = _tc_round(100 * convertLitresToGallons(a), 1)); a = '<table cellpadding="0" cellspacing="0" align="right"><tr><td class="fillp2">' + a.toFixed(1) + "&#162;</td></tr></table>"; break; case "mpig": 10 < a && (a = convertLitresToGallons(a / 100)), a = convertImpGallonsToGallons(a), a = '<table cellpadding="0" cellspacing="0" align="right"><tr><td class="fillp2">$' + a.toFixed(3) + "</td></tr></table>" } return a } function formatCurrency(a) { a = new String(a); 0 > a.indexOf(".") && (a += ".00"); a.indexOf(".") == a.length - 2 && (a += "0"); return a } var iShowHelpCounter = 0; function showDirHelp(a, b) { if (5 > iShowHelpCounter) { var c = document.getElementById("divDirHelp"); if (1 == b) { var d = tcGetLocation(a); c.style.position = "absolute"; c.style.top = d.top + "px"; c.style.left = d.left + 220 + "px"; c.style.zIndex = 1E3 } jQuery(c).fadeIn(500); iShowHelpCounter++ } } function hideDirHelp() { var a = document.getElementById("divDirHelp"); jQuery(a).fadeOut(500) } function savePriceAdjust() { var a = document.getElementById("txtAdjust"); if ("" != a.value && "." != a.value) { var b = parseFloat(a.value), c = new String(b), a = b; "mpg" == sMPGUnit && (document.getElementById("divPriceGas").innerHTML = "$" + _tc_round(b, 3)); if ("lkm" == sMPGUnit) { var d = !1, e = /^[0-9]{2}$/; !d && e.test(c) && (a = convertGallonsToLitres(b / 100), d = !0); e = /^[0-9]{3}$/; !d && e.test(c) && (a = convertGallonsToLitres(b / 100), d = !0); e = /^[0-9]*.[0-9]$/; !d && e.test(c) && (a = convertGallonsToLitres(b / 100), d = !0); e = /^[0-9]*.[0-9]{3,}$/; !d && e.test(c) && (b = _tc_round(100 * b, 1), a = convertGallonsToLitres(b / 100), d = !0); d || (b = _tc_round(100 * b, 1), a = convertGallonsToLitres(b)); document.getElementById("divPriceGas").innerHTML = b + "&#162;" } "mpig" == sMPGUnit && (a = _tc_round(convertImpGallonsToGallons(b), 3), document.getElementById("divPriceGas").innerHTML = "$" + b); b = convertMetersToMiles(iGDistanceCity) / iMpgCity; d = a * b; c = convertMetersToMiles(iGDistanceHwy) / iMpgHwy; d = _tc_round(d + a * c, 2); dTotalGallons = parseFloat(_tc_round(c + b, 2)); document.getElementById("divPriceGas").setAttribute("cost", a); document.getElementById("divTotalCost").innerHTML = formatCurrency(d) } jQuery("#divPriceAdjust").fadeOut(500) } function hidePriceAdjust() { jQuery("#divPriceAdjust").fadeOut(500) } function showPriceAdjust(a) { var b = document.getElementById("divPriceAdjust"); a = tcGetLocation(a); var c = bIE ? getScrollTop() : 0; b.style.position = "absolute"; b.style.top = a.top + c + "px"; b.style.left = a.left + 205 + "px"; b.style.display = ""; b.style.zIndex = 1E3; document.getElementById("txtAdjust").value = ""; document.getElementById("txtAdjust").focus(); jQuery(b).fadeIn(500) } function showStopsHelp(a, b) { var c = bIE ? getScrollTop() : 0, d = document.getElementById("divStopsHelp"); if (1 == b) { var e = tcGetLocation(a); d.style.position = "absolute"; d.style.top = e.top + c + "px"; d.style.left = e.left + 25 + "px"; d.style.zIndex = 1E3 } jQuery(d).fadeIn(500) } function hideStopsHelp() { var a = document.getElementById("divStopsHelp"); jQuery(a).fadeOut(500) } function toggleButton(a) { "over" == a ? (document.getElementById("divButton").style.cursor = "pointer", document.getElementById("divButton").style.backgroundImage = "url(/images/trip/FuelMeO.png)") : document.getElementById("divButton").style.backgroundImage = "url(/images/trip/FuelMe.png)" } function showSavingsHelp(a) { var b = document.getElementById("divSavingsHelp"), c = bIE ? getScrollTop() : 0; a = tcGetLocation(a); b.style.position = "absolute"; b.style.top = a.top + c + "px"; b.style.left = a.left + 215 + "px"; b.style.zIndex = 1E3; jQuery("#divSavingsHelp").fadeIn(500) } function hideSavingsHelp() { jQuery("#divSavingsHelp").fadeOut(500) } function showCO2(a) { var b = document.getElementById("divCO2"), c = bIE ? getScrollTop() : 0, d = bIE ? getScrollLeft() : 0; a = tcGetLocation(a); b.style.position = "absolute"; b.style.top = a.top + c + "px"; b.style.left = a.left - 270 - d + "px"; b.style.zIndex = 1E3; jQuery("#divCO2").fadeIn(500) } function hideCO2() { jQuery("#divCO2").fadeOut(500) } function tabOnly(a) { return 9 == (a.which ? a.which : a.keyCode) ? !0 : !1 } function showOverage(a) { var b = document.getElementById("divOver"), c = bIE ? getScrollTop() : 0, d = bIE ? getScrollLeft() : 0; a = tcGetLocation(a); b.style.position = "absolute"; b.style.top = a.top + c - 40 + "px"; b.style.left = a.left - 270 - d + "px"; b.style.zIndex = 1E3; jQuery("#divOver").fadeIn(500) } function hideOverage() { jQuery("#divOver").fadeOut(500) } function setMemberName(a) { sMemberID = a } function showLink(a) { var b = document.getElementById("divLink"), c = bIE ? getScrollTop() : 0, d = bIE ? getScrollLeft() : 0; a = tcGetLocation(a); b.style.position = "absolute"; b.style.top = a.top + c + 25 + "px"; b.style.left = a.left - d + "px"; b.style.zIndex = 1E3; document.getElementById("txtLink").focus(); document.getElementById("txtLink").select(); jQuery("#divLink").fadeIn(500) } function hideLink() { jQuery("#divLink").fadeOut(500) } function showEmail() { var a = document.getElementById("divLoadingOverlay"), b = document.getElementById("divShowImgBG"); bIE6 && (b.style.position = "absolute", b.style.top = "0px", b.style.left = "0px", b.style.width = document.body.scrollWidth + "px", b.style.height = document.body.scrollHeight + "px", a.style.position = "absolute", a.style.top = document.documentElement.scrollTop + "px", a.style.left = document.documentElement.scrollLeft + "px"); b.style.display = ""; b = []; b.push('<table width="100%" height="100%" border="0">'); b.push(' <tr valign="middle">'); b.push(' <td align="center">'); b.push(' <table style="background-color:#FFFFFF; border:1px solid #000000; margin: 10px 0 0 0;">'); b.push(" <tr>"); b.push(" <td>"); b.push(" <b>Share Trip</b><br />"); b.push(" Share this trip with a friend.<br />"); b.push(" </td>"); b.push(" </tr>"); b.push(" <tr>"); b.push(" <td>"); b.push(" <b>My Email</b>"); b.push(" </td>"); b.push(" </tr>"); b.push(" <tr>"); b.push(" <td>"); b.push(' <input type="text" id="txtEmail" style="width: 250px; font-family: arial; font-size: 9pt;" value="jfoster@gasbuddy.com">'); b.push(" </td>"); b.push(" </tr>"); b.push(" <tr>"); b.push(" <td>"); b.push(" <b>Friend's Email</b>"); b.push(" </td>"); b.push(" </tr>"); b.push(" <tr>"); b.push(" <td>"); b.push(' <input type="text" id="txtEmail2" style="width: 250px; font-family: arial; font-size: 9pt;" value="fizzack@gmail.com">'); b.push(" </td>"); b.push(" </tr>"); b.push(" <tr>"); b.push(" <td>"); b.push(" <b>Comments</b>"); b.push(" </td>"); b.push(" </tr>"); b.push(" <tr>"); b.push(" <td>"); b.push(' <textarea id="txtComments" style="width: 250px; height: 100px; font-family: arial; font-size: 9pt;"></textarea>'); b.push(" </td>"); b.push(" </tr>"); b.push(" <tr>"); b.push(" <td>"); b.push(' <input type="button" value="Send" style="font-family: arial; font-size: 9pt;" onclick="_tc_42_sde();"> <input type="button" value="Cancel" onclick="_tc_42_he();" style="font-family: arial;">'); b.push(" </td>"); b.push(" </tr>"); b.push(" </table>"); b.push(" </td>"); b.push(" </tr>"); b.push("</table>"); a.innerHTML = b.join(""); a.style.visibility = "visible"; a.style.display = "" } function hideEmail() { var a = document.getElementById("divLoadingOverlay"), b = document.getElementById("divShowImgBG"); b.style.visibility = "hidden"; b.style.display = "none"; a.style.visibility = "hidden"; a.style.display = "none" } function sendEmail() { var a = document.getElementById("txtEmail"), b = document.getElementById("txtEmail2"), c = document.getElementById("txtComments"); GasBuddy_ASPX.TripCalculatorControlv2.ShareTrip(a.value, b.value, c.value, location.host, location.pathname, sTripID, ShareTrip_Complete) } function ShareTrip_Complete(a) { } function ShareTrip_Failed(a) { } function createBookmark() { window.external.AddFavorite("http://" + window.location.host + window.location.pathname + "?ti=" + sTripID, "Trip Calculator") } function tcGetLocation(a) { for (var b = 0, c = 0; a; a = a.offsetParent) a.offsetLeft && (b += a.offsetLeft), a.offsetTop && (c += a.offsetTop); return { left: b, top: c } } function tcGetBounds(a) { var b = tcGetLocation(a); return { left: b.left, top: b.top, width: a.offsetWidth, height: a.offsetHeight } } function setTripID(a) { sTripID = a } var bLoadingShowing = !1; function showLoading() { "undefined" != typeof oCO_hb_co_1 && null != oCO_hb_co_1 && oCO_hb_co_1.hide(); bLoadingShowing = !0; if (!0 == bIE6) for (var a = document.getElementsByTagName("select"), b = a.length, c = 0, c = 0; c < b; c++) a[c].style.visibility = "hidden"; document.getElementById("divLoading").style.display = ""; document.getElementById("divLoadingContent").style.display = ""; positionLoading(); window._addWindowOnResize(positionLoading) } function positionLoading() { if (bLoadingShowing) { var a = document.getElementById("divLoading"), b = document.getElementById("divLoadingContent"), c = 0, d = 0, e = 0, f = 0; window.innerWidth ? (c = window.innerWidth, d = window.innerHeight) : 0 != document.documentElement.clientWidth ? (c = document.documentElement.clientWidth, d = document.documentElement.clientHeight) : (c = document.body.clientWidth, d = document.body.clientHeight); window.pageYOffset ? (e = window.pageXOffset, f = window.pageYOffset) : 0 != document.documentElement.scrollTop ? (e = document.documentElement.scrollLeft, f = document.documentElement.scrollTop) : (e = document.body.scrollLeft, f = document.body.scrollTop); a.style.width = document.body.offsetWidth + "px"; a.style.height = (document.body.offsetHeight < d ? d : document.body.offsetHeight) + "px"; b.style.top = 200 + f + "px"; b.style.left = c / 2 - b.offsetWidth / 2 + e + "px" } } function hideLoading() { if (!0 == bIE6) for (var a = document.getElementsByTagName("select"), b = a.length, c = 0, c = 0; c < b; c++) a[c].style.visibility = "visible"; document.getElementById("divLoading").style.display = "none"; document.getElementById("divLoadingContent").style.display = "none"; bLoadingShowing = !1 } function cancelTCSearch() { AjaxPro.queue.abort(); hideLoading() } function _tc_01_mpg(a) { sMPGUnit = a } function _tc_02_dist(a) { sDistanceUnit = a } function _tc_03_xe(a) { dExchangeRate = a } function _tc_03_rt(a) { bReturnTrip = new Boolean(a); initReturn() } function _tc_04_init_du() { initDistanceUnit() } function _tc_05_init_feu() { initFuelEconomyUnit() } function _tc_06_init_rt() { initReturn() } function _tc_07_sdh(a, b) { showDirHelp(a, b) } function _tc_07_hdh() { hideDirHelp() } function _tc_08_spa() { savePriceAdjust() } function _tc_08_hpa() { hidePriceAdjust() } function _tc_09_tbb() { _tc_07_hdh(); textboxBlur() } function _tc_10_ac(a) { autocomplete(a) } function _tc_11_kpd(a) { keydown(a) } function _tc_12_nk(a, b) { isNumKey(a, b) } function _tc_13_smpg(a) { saveMPG(a) } function _tc_14_st(a) { saveTank(a) } function _tc_15_sft(a) { setFuelType(a) } function _tc_16_svmpg(a) { setVehicleMPG(a) } function _tc_17_ssh(a, b) { showStopsHelp(a, b) } function _tc_17_hsh() { hideStopsHelp() } function _tc_18_tb(a) { toggleButton(a) } function _tc_19_tgs() { toggleGasStations() } function _tc_20_tdu() { toggleDistanceUnit() } function _tc_21_tfe() { toggleFuelEconomyUnit() } function _tc_22_tds() { toggleDirectionStatus() } function _tc_22b_mr() { toggleMembershipRequired() } function _tc_23_too(a) { toggleOtherOptions(a) } function _tc_24_rt(a) { toggleReturnTrip(a) } function _tc_25_init() { initialize() } function _tc_26_tvi(a) { toggleVehicleInfo(a) } function _tc_27_fmt() { fuelMyTrip() } function _tc_28_spa(a) { showPriceAdjust(a) } function _tc_29_ad() { _tc_99_sh(); addDestination() } function _tc_30_td(a, b, c, d) { toggleDirections(a, b, c, d) } function _tc_31_css(a, b, c) { bIE && window.scrollTo(0, 225); centerShowStation(a, b, c) } function _tc_32_rd(a) { removeDestination(a) } function _tc_33_to(a) { tabOnly(a) } function _tc_34_smn(a) { setMemberName(a) } function _tc_35_tbf(a) { "" == a.value && _tc_07_sdh(a, 1) } function _tc_36_ssh(a) { showSavingsHelp(a) } function _tc_36_hsh() { hideSavingsHelp() } function _tc_37_scf(a) { showCO2(a) } function _tc_37_hcf() { hideCO2() } function _tc_38_so(a) { showOverage(a) } function _tc_38_ho() { hideOverage() } function _tc_99_sh() { var a = document.getElementById("iGBSize"); "undefined" != a && null != a && _tc_Resizer() } function _tc_39_svi(a, b, c, d, e, f) { iMpgHwy = b; iMpgCity = a; dTank = c; dTankMiles = b * c; sFuelType = d; iVehicleID = e; displayMPG(); displayTank(); displayFuelType(); displayTankMiles() } function _tc_40_slt(a) { showLink(a) } function _tc_40_hlt() { hideLink() } function _tc_41_to(a) { iTimeOffset = a } function _tc_42_se() { showEmail() } function _tc_42_he() { hideEmail() } function _tc_42_sde() { sendEmail() } function _tc_43_cb() { createBookmark() } function _tc_44_ct() { cancelTCSearch() } function _tc_menu(a) { document.getElementById("divInstructions").style.display = "none"; document.getElementById("divSummary").style.display = "none"; document.getElementById("divMiniSummary").style.display = "none"; document.getElementById("divFills").style.display = "none"; document.getElementById("divMap").style.visibility = "visible"; document.getElementById("divMap").style.display = "none"; document.getElementById("divNav0").className = ""; document.getElementById("divNav1").className = ""; document.getElementById("divNav2").className = ""; document.getElementById("divNav3").className = ""; document.getElementById("divNav" + a).className = "tc_nav_selected"; switch (a) { case 0: document.getElementById("divInstructions").style.display = ""; break; case 1: document.getElementById("divSummary").style.display = ""; document.getElementById("divFills").style.display = ""; break; case 2: document.getElementById("divMiniSummary").style.display = ""; document.getElementById("divFills").style.display = ""; break; case 3: document.getElementById("divMiniSummary").style.display = "", document.getElementById("divMap").style.display = "block", document.getElementById("divFills").style.display = "" } };